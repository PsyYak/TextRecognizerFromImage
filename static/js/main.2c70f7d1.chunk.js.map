{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","file","setFile","progress","setProgress","language","setlanguage","result","setResult","className","type","onChange","e","target","alert","value","files","accept","onClick","Tesseract","recognize","logger","status","then","text","data","max","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAoEeA,MAhEf,WACE,MAAuBC,qBAAvB,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA+BF,mBAAS,GAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA+BJ,mBAAS,OAAxC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA2BN,mBAAS,IAApC,mBAAOO,EAAP,KAAcC,EAAd,KAmCA,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOC,KAAK,OAAOC,SApCF,SAACC,GAIA,QAAlBA,EAAEC,OAAOH,MAAoC,QAAlBE,EAAEC,OAAOH,MAAoC,SAAlBE,EAAEC,OAAOH,MAChEI,MAAM,wBACNF,EAAEC,OAAOE,MAAQ,MAElBb,EAAQU,EAAEC,OAAOG,MAAM,KA4BsBC,OAAO,qCAC1C,yBAAQF,MAAOV,EAAUM,SAAW,SAACC,GAAD,OAAON,EAAYM,EAAEC,OAAOE,QAAhE,UACE,wBAAQA,MAAM,MAAd,qBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,MAAd,qBACA,wBAAQA,MAAM,MAAd,wBAEP,qBAAKN,UAAU,eAAf,SACE,uBAAOC,KAAK,SAASK,MAAM,SAASG,QAlCxB,WAEL,KAAXX,IACDC,EAAU,IACVJ,EAAY,IAKde,IAAUC,UACNnB,EACAI,EACA,CAAEgB,OAAQ,SAAAd,GACa,qBAAlBA,EAAOe,QACNlB,EAAYG,EAAOJ,aAGxBoB,MAAK,YAAyB,IAAdC,EAAa,EAArBC,KAAQD,KAEhBhB,EAAUgB,WAiBb,qBAAKf,UAAU,cAAf,SACE,0BAAUM,MAAOZ,EAAUuB,IAAK,MAEtB,KAAXnB,GACC,sBAAKE,UAAU,aAAf,qBACWF,SClDJoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2c70f7d1.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from 'react';\nimport Tesseract from 'tesseract.js';\n\nfunction App() {\n  const [file,setFile] = useState();\n  const [progress,setProgress] = useState(0);\n  const [language,setlanguage] = useState(\"eng\");\n  const [result,setResult] = useState(\"\");\n  const onFileChange = (e) => {\n    // log the actual file that was uploaded by the user\n   //console.log(e.target.files[0]);\n   // make sure user using the extenstions we want\n   if(e.target.type !== 'jpg' || e.target.type !== 'png' || e.target.type !== 'jpeg'){\n     alert(\"Wrong file extention\");\n     e.target.value = null;\n   }else{\n    setFile(e.target.files[0]);\n  }\n  };\n   // after pressing submit, send the actual file to here\n  const processImage = () => {\n    // if user already uploaded an image beofore, reset the result text & progress bar from screen\n    if(result !== \"\"){\n      setResult(\"\");\n      setProgress(0);\n    } \n    //console.log(\"selected file is:\"+file);\n    //console.log(\"selected language is:\"+language);\n    //console.log(file);\n    Tesseract.recognize(\n        file,\n        language, \n        { logger: result => {\n          if(result.status === 'recognizing text'){\n              setProgress(result.progress);\n            }\n        }\n      }).then(({ data: { text } }) => {\n         //console.log(text);\n         setResult(text);\n         });\n  }\n  return (\n    <div className=\"App\">\n      <input type=\"file\" onChange={onFileChange} accept=\"image/png, image/jpeg, image/jpg\"/>       \n              <select value={language} onChange= {(e) => setlanguage(e.target.value)}>\n                <option value=\"eng\">English</option>\n                <option value=\"heb\">Hebrew</option>\n                <option value=\"fra\">French</option>\n                <option value=\"ara\">Arabic</option>\n                <option value=\"rus\">Russian</option>\n                <option value=\"spa\">Spanish</option>\n              </select>  \n         <div className=\"submitButton\">\n           <input type=\"button\" value=\"Submit\" onClick={processImage}/>\n         </div>    \n      <div className=\"progressBar\">\n        <progress value={progress} max={1}/>\n      </div>\n      {result !== \"\" && (\n        <div className=\"textResult\">\n          Result: {result}\n        </div>\n       )}\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}